/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 17 07:08:22 GMT 2017
 */

package org.apache.commons.math.analysis.integration;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.Expm1Function;
import org.apache.commons.math.analysis.QuinticFunction;
import org.apache.commons.math.analysis.SincFunction;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.integration.SimpsonIntegrator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpsonIntegrator_ESTest extends SimpsonIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SimpsonIntegrator simpsonIntegrator0 = new SimpsonIntegrator();
      SincFunction sincFunction0 = new SincFunction();
      simpsonIntegrator0.setAbsoluteAccuracy(0.5);
      double double0 = simpsonIntegrator0.integrate((UnivariateRealFunction) sincFunction0, (-4177.45369083), (-1268.543));
      assertEquals(3, simpsonIntegrator0.getIterationCount());
      assertEquals((-0.218192918333823), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Expm1Function expm1Function0 = new Expm1Function();
      SimpsonIntegrator simpsonIntegrator0 = new SimpsonIntegrator();
      simpsonIntegrator0.setMaximalIterationCount(12);
      try { 
        simpsonIntegrator0.integrate((UnivariateRealFunction) expm1Function0, (-21.000646906954128), 883.8161085360721);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // maximal number of iterations (12) exceeded
         //
         verifyException("org.apache.commons.math.analysis.integration.SimpsonIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Expm1Function expm1Function0 = new Expm1Function();
      SimpsonIntegrator simpsonIntegrator0 = new SimpsonIntegrator(expm1Function0);
      simpsonIntegrator0.setMinimalIterationCount(1);
      double double0 = simpsonIntegrator0.integrate((UnivariateRealFunction) expm1Function0, 1.7029898543501842E-8, 903.0);
      assertEquals(1, simpsonIntegrator0.getIterationCount());
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SimpsonIntegrator simpsonIntegrator0 = new SimpsonIntegrator();
      QuinticFunction quinticFunction0 = new QuinticFunction();
      simpsonIntegrator0.integrate((UnivariateRealFunction) quinticFunction0, (-1329.56257891), 1024.0);
  }
}
