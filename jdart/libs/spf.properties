# project config for jpf-symbc extension
# only process this properties file if on top of the jpf-core model classes

jpf-symbc = ${config_path}
# extensions+=,${jpf-symbc}
# we need to use ';' delimiters so that NetBeans/Ant can use this as a path spec
jpf-symbc.native_classpath=\
  ${jpf-symbc}/jpf-symbc.jar;\
  ${jpf-symbc}/jpf-symbc-annotations.jar;\
  ${jpf-symbc}/choco-1_2_04.jar;\
  ${jpf-symbc}/choco-solver-2.1.1-20100709.142532-2.jar;\
  ${jpf-symbc}/STPJNI.jar;\
  ${jpf-symbc}/scale.jar;\
  ${jpf-symbc}/automaton.jar;\
  ${jpf-symbc}/iasolver.jar;\
  ${jpf-symbc}/string.jar;\
  ${jpf-symbc}/solver.jar;\
  ${jpf-symbc}/commons-lang-2.4.jar;\
  ${jpf-symbc}/commons-math-1.2.jar;\
  ${jpf-symbc}/coral.jar;\
  ${jpf-symbc}/opt4j-2.4.jar;\
  ${jpf-symbc}/libcvc3.jar;\
  ${jpf-symbc}/org.sat4j.core.jar;\
  ${jpf-symbc}/org.sat4j.pb.jar;\
  ${jpf-symbc}/aima-core.jar;\
  ${jpf-symbc}/yicesapijava.jar;\
  ${jpf-symbc}/PathConditionsReliability-0.0.1.jar;\
  ${jpf-symbc}/grappa.jar

jpf-symbc.classpath=\
  ${jpf-symbc}/jpf-symbc-classes.jar

### configurations specific to the symbc project

# note we have to use the "+<key>=.." prepend notation since the NetBeans/Ant
# property parser doesn't like recursion
+peer_packages = gov.nasa.jpf.symbc;

jvm.insn_factory.class=gov.nasa.jpf.symbc.SymbolicInstructionFactory

# no state matching
vm.storage.class=nil

# listener to print information (PCs, test cases) about symbolic run
listener = gov.nasa.jpf.symbc.SymbolicListener

# instruct jpf not to stop at first error
search.multiple_errors=true

# replace standard execution with symbolic execution; not mandatory: already set-up in jpf-symbc

vm.insn_factory.class=gov.nasa.jpf.symbc.SymbolicInstructionFactory

# listener to print information (PCs, test cases) about symbolic run

listener = gov.nasa.jpf.symbc.SymbolicListener

# listener to print test sequences

# listener = gov.nasa.jpf.symbc.sequences.SymbolicSequenceListener

# The following JPF options are usually used for SPF as well:

# no state matching; not mandatory: already set-up in jpf-symbc

vm.storage.class=nil

# instruct jpf to not stop at first error

search.multiple_errors=true

# specify the search strategy (default is DFS)

search.class = gov.nasa.jpf.search.heuristic.BFSHeuristic

# limit the search depth (number of choices along the path)

search.depth_limit = 10

symbolic.dp=choco

# symbolic.dp=iasolver

# symbolic.dp=cvc3

# symbolic.dp=cvc3bitvec

# symbolic.dp=no_solver 

symbolic.lazy=on

symbolic.min_int=-100

symbolic.max_int=100

symbolic.min_double=-1000.0

symbolic.max_double=1000.0

symbolic.undefined=0

choco.time_bound=30000 

symbolic.debug=on