! isPalindrome1
bug1=replace::34::"int i = 1;"
bug2=replace::35::"int j = digits.size();"
bug3=replace::37::"if (digits.get(i++) != digits.get(j--)) {"
bug4=replace::38::"return true;":::replace::41::"return false;"

! isPalindrome2
bug10=replace::57::"int digit = number / 10;"
bug11=replace::58::"reverseNumber = digit * 10 + reverseNumber;"
bug12=replace::59::"number = reverseNumber / 10;"

! duplicateNumber
bug20=move::from 82::to 76
bug21=replace::74::"int j = numbers[i];":::replace::75::"while(j != i){"
bug22=replace::82::"numbers[j] = i;"
bug23=replace::79::"return i;"

! searchInSortingMatrix1
bug30=replace::108::"while(start < end){"
bug31=swap::114::116

! reverseWord
bug40=replace::154::"if((i >= 0 && j <= s.length && i <= j)){"
bug41=replace::133::"while (start < sentence.length) {"
bug42=replace::137::"end = start + 1;"

! match
bug50=replace::179::"return match(p, 0, sentence, 0);"
bug51=replace::191::"return (startP + 1 < pattern.length && pattern[startP + 1] == START && match(s, startS, pattern, startP + 1));"
bug52=replace::195::"return true;"
bug53=replace::206::"return false;"
bug54=replace::209::"return (s[startS] == pattern[startP]) && match(s, startS + 1, pattern, startP + 1);"

! findInRotatedSortedArray
bug60=replace::221"return start;"
bug61=replace::224::"if(A[start] < A[middle]){"
bug62=swap::226::228