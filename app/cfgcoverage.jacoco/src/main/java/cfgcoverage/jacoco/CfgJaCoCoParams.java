/*
 * Copyright (C) 2013 by SUTD (Singapore)
 * All rights reserved.
 *
 * 	Author: SUTD
 *  Version:  $Revision: 1 $
 */

package cfgcoverage.jacoco;

import java.io.File;
import java.io.IOException;
import java.util.List;

import org.jacoco.core.data.ExecutionData.ProbesType;

import sav.common.core.SavRtException;
import sav.common.core.SystemVariables;
import sav.common.core.utils.JunitUtils;
import sav.strategies.dto.AppJavaClassPath;

/**
 * @author LLT
 * 
 */
public class CfgJaCoCoParams {
	public static final String JACOCO_LOG_FILE = "cfgJacoco.jacocoLogFile";
	/*
	 * boolean: indicate whether a testcase with same probes (with previous one)
	 * should still be counted
	 */
	public static final String DUPLICATE_FILTER = "cfgJacoco.duplicate_filter";
	public static final String COLLECT_JUNIT_RESULT = "cfgJacoco.isCollectJunitResult";
	private boolean duplicateFilter;
	private long timeout;
	private boolean usingSimpleRunner = false;
	private List<String> targetMethods;
	private List<String> targetClassNames;
	private List<String> junitClassNames;
	private String jacocoExecFilePath;
	private ProbesType probesType = ProbesType.INTEGER;
	private String jacocoLogFile;
	private List<String> junitMethods;
	private boolean jacocoExecFileAutoGenerated;
	private boolean collectJunitResult;
	/* internal params */
	private String junitResultFile;

	public CfgJaCoCoParams(AppJavaClassPath appClasspath) {
		duplicateFilter = appClasspath.getPreferences().<Boolean> get(DUPLICATE_FILTER, false);
		timeout = appClasspath.getPreferences().get(SystemVariables.TESTCASE_TIMEOUT);
		jacocoLogFile = appClasspath.getPreferences().<String>get(JACOCO_LOG_FILE);
		collectJunitResult = appClasspath.getPreferences().get(COLLECT_JUNIT_RESULT, false);
	}

	public boolean needToFilterDuplicate() {
		return duplicateFilter;
	}

	public void setDuplicateFilter(boolean duplicateFilter) {
		this.duplicateFilter = duplicateFilter;
	}

	public long getTimeout() {
		return timeout;
	}

	public void setTimeout(long timeout) {
		this.timeout = timeout;
	}

	public boolean isUsingSimpleRunner() {
		return usingSimpleRunner;
	}

	public void setUsingSimpleRunner(boolean usingSimpleRunner) {
		this.usingSimpleRunner = usingSimpleRunner;
	}

	public List<String> getTargetMethods() {
		return targetMethods;
	}

	public void setTargetMethods(List<String> targetMethods) {
		this.targetMethods = targetMethods;
	}

	public List<String> getTargetClassNames() {
		return targetClassNames;
	}

	public void setTargetClassNames(List<String> targetClassNames) {
		this.targetClassNames = targetClassNames;
	}

	public List<String> getJunitClassNames() {
		return junitClassNames;
	}

	public void setJunitClassNames(List<String> junitClassNames, ClassLoader classLoader) {
		this.junitClassNames = junitClassNames;
		junitMethods = JunitUtils.extractTestMethods(junitClassNames, classLoader);
	}

	public boolean isDuplicateFilter() {
		return duplicateFilter;
	}

	public String getJacocoExecFilePath() {
		if (jacocoExecFilePath == null) {
			jacocoExecFileAutoGenerated = true;
			try {
				jacocoExecFilePath = File.createTempFile("cfgJacoco", ".exec").getAbsolutePath();
			} catch (IOException e) {
				throw new SavRtException("Cannot init jacoco exec file: ", e.getMessage());
			}
		}
		return jacocoExecFilePath;
	}

	public void setJacocoExecFilePath(String destfile) {
		this.jacocoExecFilePath = destfile;
	}
	
	public void resetJacocoExecFilePath() {
		if (jacocoExecFileAutoGenerated) {
			this.jacocoExecFilePath = null;
			jacocoExecFileAutoGenerated = false;
		}
	}

	public ProbesType getProbesType() {
		return probesType;
	}

	public String getJacocoLogFile() {
		return jacocoLogFile;
	}

	public void setJacocoLogFile(String jacocoLogFile) {
		this.jacocoLogFile = jacocoLogFile;
	}
	
	public List<String> getJunitMethods() {
		return junitMethods;
	}

	public boolean isCollectJunitResult() {
		return collectJunitResult;
	}

	public void setCollectJunitResult(boolean collectJunitResult) {
		this.collectJunitResult = collectJunitResult;
	}

	String getJunitResultFile() {
		if (junitResultFile == null && collectJunitResult) {
			try {
				File tempFile;
				tempFile = File.createTempFile("tcsExResult", ".txt");
				tempFile.deleteOnExit();
				junitResultFile = tempFile.getAbsolutePath();
			} catch (IOException e) {
				throw new SavRtException("Cannot create temp file: " + e.getMessage());
			}
		}
		return junitResultFile;
	}

	void setJunitResultFile(String junitResultFile) {
		this.junitResultFile = junitResultFile;
	}
	
}
